#include <iostream>
#include <list>
#include <vector>

using namespace std;

/**
 * Graph class
 */
class Graph {
    int       size;
    list<int> *adj;
public:
    // Constructor
    Graph(int size);

    // Add edge to a Graph
    void addEdge(int u, int v);

    // Breadth First Search
    int *BFS(int source);

    // Print graph (for debugging)
    void print();
};

Graph::Graph(int size) : size(size) {
    adj = new list<int>[size + 1];
}

void Graph::addEdge(int u, int v) {
    adj[u].push_back(v);
}

int *Graph::BFS(int source) {
    // Define visited array to keep track of list visited vertices
    bool *visited = new bool[size + 1];

    // Define level array to keep track of vertex's level
    int *level = new int[size + 1];

    // Initialize visited array
    for (int i = 0; i < size + 1; ++i) {
        visited[i] = false;
        level[i]   = -1;
    }

    // Define a queue for BFS
    list<int> queue;

    // Add the source vertex into the queue and set source
    // visited = true
    queue.push_back(source);
    visited[source] = true;
    level[source]   = -1;

    // Define queue iterator for the coming up for loop
    list<int>::iterator it;

    while (!queue.empty()) {
        // Get first element of the queue before pop
        source = queue.front();

        // Pop the first element out of the queue
        queue.pop_front();

        // Check all neighbour vertices of the front element
        for (it = adj[source].begin(); it != adj[source].end(); ++it) {
            if (!visited[*it]) {
                // Update visited and level arrays
                visited[*it] = true;
                level[*it]   = level[source] + 1;

                // Push a unvisited neighbour vertex into queue
                queue.push_back(*it);
            }
        }
    }

    return level;
}

void Graph::print() {
    list<int>::iterator it;
    for (int i = 0; i < size; ++i) {
        cout << endl << "---" << endl;
        cout << "Vertex id = " << i << endl;
        for (it = adj[i].begin(); it != adj[i].end(); ++it) {
            cout << *it << " ";
        }
        cout << endl << "---" << endl;
    }
}

/**
 * Print 2D array the show amazon locker distance
 */
void getLockerDistance(int row, int col, vector<int> xArr, vector<int> yArr) {
    // Initialize a graph
    int   size = row * col;
    Graph g    = Graph(size);

    // Add edge into a graph
    for (int i = 0; i < size; ++i) {
        // Every vertex with coor [x, y] will connect to
        // 4 other vertices with coor [x, y - 1](top),
        // [x, y + 1](bottom), [x-1, y](left), [x+1, y] (right)
        int x = i % col;
        int y = i / col;

        // Add edge to top
        if (y - 1 >= 0) {
            // Vertex *top = new Vertex(x, y - 1, col);
            int top = x + col * (y - 1);
            g.addEdge(i, top);
        }

        // Add edge to bottom
        if (y + 1 < row) {
            // Vertex *bottom = new Vertex(x, y + 1, col);
            int bottom = x + col * (y + 1);
            g.addEdge(i, bottom);
        }

        // Add edge to left
        if (x - 1 >= 0) {
            // Vertex *left = new Vertex(x - 1, y, col);
            int left = (x - 1) + col * y;
            g.addEdge(i, left);
        }

        // Add edge to right
        if (x + 1 < col) {
            // Vertex *right = new Vertex(x + 1, y, col);
            int right = (x + 1) + col * y;
            g.addEdge(i, right);
        }
    }

    // Add edge from source vertex to all locker
    // We will create a new source vertex that connect to all
    // lockers. The source vertex will be the last element of
    // adjacent list.
    int len = xArr.size();
    vector<int>::iterator itX, itY;
    for (itX = xArr.begin(), itY = yArr.begin(); itX != xArr.end() && itY != yArr.end(); ++itX, ++itY) {
        int tmp = *itX + *itY * col;
        g.addEdge(size, tmp);
    }

    // Run BFS
    int *level = g.BFS(size);

    // Print out the result
    cout << "2D array result is : " << endl;
    for (int i = 0; i < row; ++i) {
        for (int j = 0; j < col; ++j) {
            cout << level[j + i * col] << " ";
        }
        cout << endl;
    }
    cout << endl;
}

int main() {
    int width;
    int height;
    int numlocker;

    cout << "Enter width : ";
    cin >> width;
    int col = width;

    cout << "Enter height : ";
    cin >> height;
    int row = height;

    cout << "Enter number of locker : ";
    cin >> numlocker;

    int         tmp;
    vector<int> x;
    vector<int> y;
    for (int i = 0; i < numlocker; ++i) {
        cout << "Enter x coor for locker " << i + 1 << " : ";
        cin >> tmp;
        x.push_back(tmp - 1);
    }

    for (int i = 0; i < numlocker; ++i) {
        cout << "Enter y coor for locker " << i + 1 << " : ";
        cin >> tmp;
        y.push_back(tmp - 1);
    }

    getLockerDistance(row, col, x, y);

    return 0;
}